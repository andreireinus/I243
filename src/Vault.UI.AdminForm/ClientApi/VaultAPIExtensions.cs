// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Vault.UI.AdminForm.ClientApi
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VaultAPI.
    /// </summary>
    public static partial class VaultAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Book> BookGetAll(this IVaultAPI operations)
            {
                return operations.BookGetAllAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Book>> BookGetAllAsync(this IVaultAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookGetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='author'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='locationName'>
            /// </param>
            /// <param name='isAvailable'>
            /// </param>
            /// <param name='pictures'>
            /// </param>
            public static Book BookCreate(this IVaultAPI operations, int? id = default(int?), string author = default(string), string name = default(string), int? locationId = default(int?), string locationName = default(string), bool? isAvailable = default(bool?), IList<object> pictures = default(IList<object>))
            {
                return operations.BookCreateAsync(id, author, name, locationId, locationName, isAvailable, pictures).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='author'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='locationName'>
            /// </param>
            /// <param name='isAvailable'>
            /// </param>
            /// <param name='pictures'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Book> BookCreateAsync(this IVaultAPI operations, int? id = default(int?), string author = default(string), string name = default(string), int? locationId = default(int?), string locationName = default(string), bool? isAvailable = default(bool?), IList<object> pictures = default(IList<object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookCreateWithHttpMessagesAsync(id, author, name, locationId, locationName, isAvailable, pictures, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Book BookGet(this IVaultAPI operations, int id)
            {
                return operations.BookGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Book> BookGetAsync(this IVaultAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='id1'>
            /// </param>
            /// <param name='author'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='locationName'>
            /// </param>
            /// <param name='isAvailable'>
            /// </param>
            /// <param name='pictures'>
            /// </param>
            public static Book BookUpdate(this IVaultAPI operations, int id, int id1, string author = default(string), string name = default(string), int? locationId = default(int?), string locationName = default(string), bool? isAvailable = default(bool?), IList<object> pictures = default(IList<object>))
            {
                return operations.BookUpdateAsync(id, id1, author, name, locationId, locationName, isAvailable, pictures).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='id1'>
            /// </param>
            /// <param name='author'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='locationId'>
            /// </param>
            /// <param name='locationName'>
            /// </param>
            /// <param name='isAvailable'>
            /// </param>
            /// <param name='pictures'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Book> BookUpdateAsync(this IVaultAPI operations, int id, int id1, string author = default(string), string name = default(string), int? locationId = default(int?), string locationName = default(string), bool? isAvailable = default(bool?), IList<object> pictures = default(IList<object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BookUpdateWithHttpMessagesAsync(id, id1, author, name, locationId, locationName, isAvailable, pictures, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Lender> LenderGetAll(this IVaultAPI operations)
            {
                return operations.LenderGetAllAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Lender>> LenderGetAllAsync(this IVaultAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LenderGetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='lendingHistory'>
            /// </param>
            public static Lender LenderCreate(this IVaultAPI operations, int? id = default(int?), string name = default(string), string email = default(string), IList<object> lendingHistory = default(IList<object>))
            {
                return operations.LenderCreateAsync(id, name, email, lendingHistory).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='lendingHistory'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Lender> LenderCreateAsync(this IVaultAPI operations, int? id = default(int?), string name = default(string), string email = default(string), IList<object> lendingHistory = default(IList<object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LenderCreateWithHttpMessagesAsync(id, name, email, lendingHistory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Lender LenderGet(this IVaultAPI operations, int id)
            {
                return operations.LenderGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Lender> LenderGetAsync(this IVaultAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LenderGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='id1'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='lendingHistory'>
            /// </param>
            public static Lender LenderUpdate(this IVaultAPI operations, int id, int id1, string name = default(string), string email = default(string), IList<object> lendingHistory = default(IList<object>))
            {
                return operations.LenderUpdateAsync(id, id1, name, email, lendingHistory).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='id1'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='lendingHistory'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Lender> LenderUpdateAsync(this IVaultAPI operations, int id, int id1, string name = default(string), string email = default(string), IList<object> lendingHistory = default(IList<object>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LenderUpdateWithHttpMessagesAsync(id, id1, name, email, lendingHistory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
